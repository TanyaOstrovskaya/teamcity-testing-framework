package com.example.teamcity.api.project.create.validation

import com.example.teamcity.api.BaseApiTest
import com.example.teamcity.api.enums.UserRole.PROJECT_ADMIN
import com.example.teamcity.api.generators.RandomData
import com.example.teamcity.api.generators.TestDataGenerator
import com.example.teamcity.api.generators.TestDataStorage
import com.example.teamcity.api.requests.unchecked.UncheckedProject
import com.example.teamcity.api.spec.Specifications
import org.apache.http.HttpStatus.SC_BAD_REQUEST
import org.apache.http.HttpStatus.SC_INTERNAL_SERVER_ERROR
import org.hamcrest.Matchers.containsString
import org.testng.annotations.DataProvider
import org.testng.annotations.Test

private const val MAX_ID_LENGTH = 225

class ProjectCreateIdValidationTest:  BaseApiTest() {

    @Test(dataProvider = "validIds")
    fun projectWithValidIdCanBeCreated(id: String) {
        val project = checkedWithSuperUser.projectRequest.create(testData.project.copy(id = id))

        softy.assertThat(project.id).isEqualToIgnoringCase(id)
    }

    @Test(dataProvider = "invalidIds")
    fun projectWithInvalidIdCannotBeCreated(id: String?, errorString: String) {
        uncheckedWithSuperUser.projectRequest
            .create(testData.project.copy(id = id))
            .then()
            .assertThat()
            .statusCode(SC_INTERNAL_SERVER_ERROR)   // todo: report bug, answer is 500, should be 400
            .body(containsString(errorString));
    }

    @Test
    fun projectWithAbsentIdCreatedWithAutogeneratedId() {
        val project = checkedWithSuperUser.projectRequest.create(testData.project.copy(id = null))

        softy.assertThat(project.id).isNotEmpty()
    }

    @Test
    fun projectWithSameIdCannotBeCreatedForSameUser() {
        checkedWithSuperUser.projectRequest.create(testData.project)

        val secondTestData = TestDataStorage.addTestData()
        uncheckedWithSuperUser.projectRequest
            .create(secondTestData.project.copy(id = testData.project.id))
            .then()
            .assertThat()
            .statusCode(SC_BAD_REQUEST)
            .body(containsString("Project ID \"${testData.project.id}\" is already used by another project"));
    }

    @Test
    fun projectWithSameIdCannotBeCreatedForAnotherUser() {
        val superUserProject = checkedWithSuperUser.projectRequest.create(testData.project)
        testData.user.roles = TestDataGenerator.generateRoles(PROJECT_ADMIN, "p:${testData.project.id}")
        checkedWithSuperUser.userRequest.create(testData.user)

        val secondTestData = TestDataStorage.addTestData()
        UncheckedProject(Specifications.authSpec(testData.user))
            .create(secondTestData.project.copy(
                parentProject = superUserProject,
                id = testData.project.id
            ))
            .then()
            .assertThat()
            .statusCode(SC_BAD_REQUEST)
            .body(containsString("Project ID \"${testData.project.id}\" is already used by another project"));
    }

    companion object {
        @DataProvider(name = "validIds")
        @JvmStatic
        fun validIds(): Array<String?> {
            return arrayOf(
                RandomData.getString(),
                RandomData.getString(MAX_ID_LENGTH),
                RandomData.getNumeric(),
            )
        }

        @DataProvider(name = "invalidIds")
        @JvmStatic
        fun invalidIds(): Array<Array<String>> {
            return arrayOf(
                arrayOf(
                    "",
                    "Project ID must not be empty."
                ),
                arrayOf(
                    "\t${RandomData.getString()}   ${RandomData.getString()}",
                    "is invalid: starts with non-letter character"
                ),
                arrayOf(
                    RandomData.getString(MAX_ID_LENGTH + 1),
                    "is invalid: it is ${MAX_ID_LENGTH + 1} characters long while the maximum length is 225."
                ),
                arrayOf(
                    "${RandomData.getString()} \\ ${RandomData.getString()}",
                    "is invalid: contains unsupported character"
                )
            )
        }
    }
}
